<?xml version="1.0" encoding="UTF-8"?>
<!-- pom.xml的根元素-->
<project xmlns="http://maven.apache.org/POM/4.0.0"
         xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
    <!-- 当前pom模型的版本,maven2\3只能是4.0.0-->
    <modelVersion>4.0.0</modelVersion>

    <groupId>com.jd.tx</groupId>
    <artifactId>my-project</artifactId>
    <packaging>pom</packaging>
    <version>0.0.1-SNAPSHOT</version>
    <modules>
        <module>my-project-common</module>
        <module>my-project-domain</module>
        <module>my-project-rpc-comsumer</module>
        <module>my-project-service</module>
        <module>my-project-web</module>
    </modules>

    <!-- 为pom定义一些常量，在pom中的其它地方可以直接引用 使用方式 如下 ：${file.encoding} -->
    <properties>
        <joda-time.version>2.9.5</joda-time.version>
        <fastjson.version>1.2.28</fastjson.version>
        <spring.version>3.2.4.RELEASE</spring.version>
        <guava.version>18.0</guava.version>
    </properties>

    <!-- 依赖jar包-->
    <dependencies>
        <!--时间工具类-->
        <dependency>
            <groupId>joda-time</groupId>
            <artifactId>joda-time</artifactId>
            <version>${joda-time.version}</version>
        </dependency>
        <!-- fastjson -->
        <dependency>
            <groupId>com.alibaba</groupId>
            <artifactId>fastjson</artifactId>
            <version>${fastjson.version}</version>
        </dependency>
        <!-- Guava 工具类-->
        <dependency>
            <groupId>com.google.guava</groupId>
            <artifactId>guava</artifactId>
            <version>${guava.version}</version>
        </dependency>
        <dependency>
            <groupId>com.alibaba</groupId>
            <artifactId>fastjson</artifactId>
            <version>1.2.25</version>
        </dependency>
        <!-- spring begin -->
        <dependency>
            <groupId>org.springframework</groupId>
            <artifactId>spring-beans</artifactId>
            <version>${spring.version}</version>
        </dependency>
        <dependency>
            <groupId>org.springframework</groupId>
            <artifactId>spring-context-support</artifactId>
            <version>${spring.version}</version>
        </dependency>
        <dependency>
            <groupId>org.springframework</groupId>
            <artifactId>spring-webmvc</artifactId>
            <version>${spring.version}</version>
        </dependency>
        <dependency>
            <groupId>org.springframework</groupId>
            <artifactId>spring-core</artifactId>
            <version>${spring.version}</version>
        </dependency>
        <dependency>
            <groupId>org.springframework</groupId>
            <artifactId>spring-tx</artifactId>
            <version>${spring.version}</version>
        </dependency>
        <dependency>
            <groupId>org.springframework</groupId>
            <artifactId>spring-web</artifactId>
            <version>${spring.version}</version>
        </dependency>
        <dependency>
            <groupId>org.springframework</groupId>
            <artifactId>spring-aspects</artifactId>
            <version>${spring.version}</version>
        </dependency>
        <!-- spring end -->
        <dependency>
            <groupId>org.quartz-scheduler</groupId>
            <artifactId>quartz</artifactId>
            <version>1.8.6</version>
        </dependency>
        <dependency>
            <groupId>junit</groupId>
            <artifactId>junit</artifactId>
            <version>4.5</version>
            <scope>test</scope>
        </dependency>
    </dependencies>

    <build>
        <!-- 产生的构件的文件名，默认值是${artifactId}-${version}。 -->
        <finalName>myPorjectName</finalName>
        <!-- 构建产生的所有文件存放的目录,默认为${basedir}/target，即项目根目录下的target -->
        <directory>${basedir}/target</directory>
        <!--当项目没有规定目标（Maven2叫做阶段（phase））时的默认值， -->
        <!--必须跟命令行上的参数相同例如jar:jar，或者与某个阶段（phase）相同例如install、compile等 -->
        <defaultGoal>install</defaultGoal>
        <!--当filtering开关打开时，使用到的过滤器属性文件列表。 -->
        <!--项目配置信息中诸如${spring.version}之类的占位符会被属性文件中的实际值替换掉 -->
        <filters>
            <filter>../filter.properties</filter>
        </filters>
        <!--项目相关的所有资源路径列表，例如和项目相关的配置文件、属性文件，这些资源被包含在最终的打包文件里。 -->
        <resources>
            <resource>
                <!--描述存放资源的目录，该路径相对POM路径 -->
                <directory>src/main/java</directory>
                <!--包含的模式列表 -->
                <includes>
                    <include>**/*.properties</include>
                    <include>**/*.xml</include>
                </includes>
                <!--排除的模式列表 如果<include>与<exclude>划定的范围存在冲突，以<exclude>为准 -->
                <!--<excludes>-->
                    <!--<exclude>jdbc.properties</exclude>-->
                <!--</excludes>-->
                <!--是否使用参数值代替参数名。参数值取自properties元素或者文件里配置的属性，文件在filters元素里列出。 -->
                <filtering>false</filtering>
            </resource>
        </resources>
        <!--单元测试相关的所有资源路径，配制方法与resources类似 -->
        <!--<testResources>-->
            <!--<testResource>-->
                <!--<targetPath />-->
                <!--<filtering />-->
                <!--<directory />-->
                <!--<includes />-->
                <!--<excludes />-->
            <!--</testResource>-->
        <!--</testResources>-->
        <!--项目源码目录，当构建项目的时候，构建系统会编译目录里的源码。该路径是相对于pom.xml的相对路径。 -->
        <sourceDirectory>${basedir}\src\main\java</sourceDirectory>

        <!--项目脚本源码目录，该目录和源码目录不同， <!-- 绝大多数情况下，该目录下的内容会被拷贝到输出目录(因为脚本是被解释的，而不是被编译的)。 -->
        <scriptSourceDirectory>${basedir}\src\main\scripts
        </scriptSourceDirectory>

        <!--项目单元测试使用的源码目录，当测试项目的时候，构建系统会编译目录里的源码。该路径是相对于pom.xml的相对路径。 -->
        <testSourceDirectory>${basedir}\src\test\java</testSourceDirectory>

        <!--被编译过的应用程序class文件存放的目录。 -->
        <outputDirectory>${basedir}\target\classes</outputDirectory>

        <!--被编译过的测试class文件存放的目录。 -->
        <testOutputDirectory>${basedir}\target\test-classes
        </testOutputDirectory>

        <!--项目的一系列构建扩展,它们是一系列build过程中要使用的产品，会包含在running bulid‘s classpath里面。 -->
        <!--他们可以开启extensions，也可以通过提供条件来激活plugins。 -->
        <!--简单来讲，extensions是在build过程被激活的产品 -->
        <extensions>

            <!--例如，通常情况下，程序开发完成后部署到线上Linux服务器，可能需要经历打包、 -->
            <!--将包文件传到服务器、SSH连上服务器、敲命令启动程序等一系列繁琐的步骤。 -->
            <!--实际上这些步骤都可以通过Maven的一个插件 wagon-maven-plugin 来自动完成 -->
            <!--下面的扩展插件wagon-ssh用于通过SSH的方式连接远程服务器， -->
            <!--类似的还有支持ftp方式的wagon-ftp插件 -->
            <extension>
                <groupId>org.apache.maven.wagon</groupId>
                <artifactId>wagon-ssh</artifactId>
                <version>2.8</version>
            </extension>

        </extensions>

        <!--使用的插件列表-->
        <plugins>
            <plugin>
                <!-- war插件 -->
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-war-plugin</artifactId>
                <version>2.3</version>
                <configuration>
                    <warName>${project.artifactId}</warName>
                    <filteringDeploymentDescriptors>true</filteringDeploymentDescriptors>
                    <webResources>
                        <resource>
                            <filtering>true</filtering>
                            <directory>src/main/webapp/WEB-INF</directory>
                            <includes>
                                <include>*.xml</include>
                                <include>*.jar</include>
                            </includes>
                            <targetPath>WEB-INF</targetPath>
                        </resource>
                    </webResources>
                </configuration>
            </plugin>
            <plugin>
                <artifactId>maven-compiler-plugin</artifactId>
                <version>2.3.2</version>
                <configuration>
                    <source>1.7</source>
                    <target>1.7</target>
                    <encoding>UTF-8</encoding>
                </configuration>
            </plugin>
            <plugin>
                <groupId>org.codehaus.mojo</groupId>
                <artifactId>tomcat-maven-plugin</artifactId>
                <version>1.1</version>
                <configuration>
                    <port>80</port>
                    <path>/</path>
                    <uriEncoding>UTF-8</uriEncoding>
                </configuration>
            </plugin>
            <plugin>
                <artifactId>maven-resources-plugin</artifactId>
                <version>2.5</version>
                <configuration>
                    <encoding>UTF-8</encoding>
                </configuration>
            </plugin>
            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-surefire-plugin</artifactId>
                <version>2.20</version>
                <configuration>
                    <skip>true</skip>
                </configuration>
            </plugin>
        </plugins>

        <!--主要定义插件的共同元素、扩展元素集合，类似于dependencyManagement， -->
        <!--所有继承于此项目的子项目都能使用。该插件配置项直到被引用时才会被解析或绑定到生命周期。 -->
        <!--给定插件的任何本地配置都会覆盖这里的配置 -->
        <pluginManagement>
            <plugins>...</plugins>
        </pluginManagement>
    </build>

    <!--发现依赖和扩展的远程仓库列表。 -->
    <repositories>
        <!--包含需要连接到远程仓库的信息 -->
        <repository>
            <!--远程仓库唯一标识符。可以用来匹配在settings.xml文件里配置的远程仓库 -->
            <id>public-snapshots</id>
            <!--远程仓库名称 -->
            <name>repo-name</name>
            <!--远程仓库URL，按protocol://hostname/path形式 -->
            <url>http://maven.aliyun.com/nexus/content/repositories/snapshots/</url>
            <!--用于定位和排序构件的仓库布局类型-可以是default（默认）或者legacy（遗留）。 -->
            <!--Maven 2为其仓库提供了一个默认的布局； -->
            <!--然而，Maven1.x有一种不同的布局。 -->
            <!--我们可以使用该元素指定布局是default（默认）还是legacy（遗留）。 -->
            <layout> default</layout>
            <!--如何处理远程仓库里发布版本的下载 -->
            <releases>
                <!--true或者false表示该仓库是否为下载某种类型构件（发布版，快照版）开启。 -->
                <enabled />
                <!--该元素指定更新发生的频率。Maven会比较本地POM和远程POM的时间戳。 -->
                <!--这里的选项是：always（一直），daily（默认，每日）， -->
                <!--interval：X（这里X是以分钟为单位的时间间隔），或者never（从不）。 -->
                <updatePolicy />
                <!--当Maven验证构件校验文件失败时该怎么做： -->
                <!--ignore（忽略），fail（失败），或者warn（警告）。 -->
                <checksumPolicy />
            </releases>
            <!--如何处理远程仓库里快照版本的下载。有了releases和snapshots这两组配置， -->
            <!--POM就可以在每个单独的仓库中，为每种类型的构件采取不同的策略。 -->
            <!--例如，可能有人会决定只为开发目的开启对快照版本下载的支持 -->
            <snapshots>
                <enabled />
                <updatePolicy />
                <checksumPolicy />
            </snapshots>
        </repository>
    </repositories>

    <!--发现插件的远程仓库列表，这些插件用于构建和报表 -->
    <pluginRepositories>

        <!--包含需要连接到远程插件仓库的信息.参见repositories/repository元素 -->
        <pluginRepository />

    </pluginRepositories>

</project>